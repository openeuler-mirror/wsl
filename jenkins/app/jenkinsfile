pipeline {
    agent { label 'windows' }

    environment {
        release_version = '0'
    }

    stages {
        stage('build wsl app') {
            steps {
                // this will set pipeline project in first run
                script {
                    properties([
                        giteeConnection('gitee'),
                        parameters([
                            choice(choices: ['22.03', '20.03', '23.03', '23.09', '24.03', '25.03'], description: 'openEuler release version', name: 'release'),
                            choice(choices: ['no', 'yes'], description:'Whether to publish the app to Windows Store', name: 'publish'),
                            string(name: 'server', description:'hostname of daily build server', defaultValue: 'http://121.36.84.172'),
                            string(name: 'baseuri', description:'base uri of daily build repos', defaultValue: 'dailybuild'),
                            string(name: 'branch', description:'branch of daily build repos', defaultValue: ''),
                            string(name: 'date', description:'date of daily build repos', defaultValue: ''),
                        ])
                    ])
                }

                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'lichaoran-gitee', url: 'https://gitee.com/openeuler/wsl']]])
                bat 'pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple'
                bat 'pip install -r requirements.txt'

                script {
                    nstdout = bat(returnStdout: true, script: '@python get_sp_version.py %release%').trim()
                    release_version = nstdout
                }

                withEnv(["release_version=${release_version}"]) {
                    bat('python custom.py -r %release% -v %release_version%.%BUILD_NUMBER%')
                }

                withCredentials([string(credentialsId: 'wsl_api_token', variable: 'wsl_jenkins_api_token'), string(credentialsId: 'openeuler-wsl-jenkins-master-url', variable: 'url')]) {
                    script {
                        def jb
                        if (env.date != "")  {
                            jb = build job: 'openeuler-wsl-rootfs', parameters: [
                                string(name: 'release', value: "${env.release}"),
                                string(name: 'server', value: "${env.server}"),
                                string(name: 'baseuri', value: "${env.baseuri}"),
                                string(name: 'branch', value: "${env.branch}"),
                                string(name: 'date', value: "${env.date}")
                            ]
                        } else {
                            jb = build job: 'openeuler-wsl-rootfs', parameters: [string(name: 'release', value: "${env.release}")]
                        }
                        dir('x64') {
                            withEnv(["id=${jb.id}"]) {
                                script {
                                    bat 'curl -f -o install.tar.gz -L http://lichaoran:%wsl_jenkins_api_token%@%url%/job/EBS-OS-build/job/wsl/job/openeuler-wsl-rootfs/%id%/arch=x86_64,label=docker-buildx/artifact/outdir/%release%-x86_64.tar.gz'
                                }
                            }
                        }
                        dir('ARM64') {
                            withEnv(["id=${jb.id}"]) {
                                script {
                                    bat 'curl -f -o install.tar.gz -L http://lichaoran:%wsl_jenkins_api_token%@%url%/job/EBS-OS-build/job/wsl/job/openeuler-wsl-rootfs/%id%/arch=aarch64,label=docker-buildx/artifact/outdir/%release%-aarch64.tar.gz'
                                }
                            }
                        }
                    }
                }

                withCredentials([string(credentialsId: 'wsl_cert_b64_CN920C954F-C51F-4683-B12C-C821B68C7D6B', variable: 'cert_b64')]) {
                    writeFile file: 'certificate.txt', text: cert_b64
                }

                bat 'powershell "certutil -decode -f certificate.txt certificate.pfx"'
                bat 'powershell "Import-PfxCertificate -CertStoreLocation Cert:LocalMachine\\Trust -FilePath certificate.pfx"'
                bat 'powershell "Import-PfxCertificate -CertStoreLocation Cert:CurrentUser\\My -FilePath certificate.pfx"'
                bat '.\\build.bat'
                bat 'powershell "cp -v meta/%release%/%release%.PNG AppPackages/DistroLauncher-Appx/"'

                bat 'powershell Compress-Archive -Force -Path ".\\AppPackages\\DistroLauncher-Appx\\DistroLauncher-Appx_*\\*" -DestinationPath openEuler-WSL-%release%.zip'
                bat 'python hash.py openEuler-WSL-%release%.zip'
                archiveArtifacts artifacts: "openEuler-WSL-${release}.zip", followSymlinks: false
                archiveArtifacts artifacts: "openEuler-WSL-${release}.zip.sha256sum", followSymlinks: false
                script {
                    if (publish == 'yes') {
                        dir('AppPackages/DistroLauncher-Appx') {
                            bat 'powershell Compress-Archive -Force -Path ".\\DistroLauncher-Appx_*_x64_arm64_bundle.appxupload", "*.PNG" -DestinationPath app.zip"'
                        }
                        withCredentials([string(credentialsId:'openeuler_wsl_azure_tenant_id_lichaoran', variable: 'tenant_id'),
                                            string(credentialsId:'openeuler_wsl_azure_client_id_lichaoran', variable: 'client_id'),
                                            string(credentialsId:'openeuler_wsl_azure_app_key_lichaoran', variable:'app_key')]) {
                            bat 'python submit.py -c %client_id% -t  %tenant_id% -k %app_key% -r %release% -f AppPackages/DistroLauncher-Appx/app.zip'
                                            }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
